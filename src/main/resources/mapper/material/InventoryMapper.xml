<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qz.zframe.material.dao.InventoryMapper" >
  <resultMap id="BaseResultMap" type="com.qz.zframe.material.entity.Inventory" >
    <id column="inventory_id" property="inventoryId" jdbcType="VARCHAR" />
    <result column="material_id" property="materialId" jdbcType="VARCHAR" />
    <result column="wind_id" property="windId" jdbcType="VARCHAR" />
    <result column="stock_add_id" property="stockAddId" jdbcType="VARCHAR" />
    <result column="inventory_num" property="inventoryNum" jdbcType="INTEGER" />
    <result column="inventory_amount" property="inventoryAmount" jdbcType="DECIMAL" />
    <result column="freeze_num" property="freezeNum" jdbcType="INTEGER" />
    <result column="freeze_amount" property="freezeAmount" jdbcType="DECIMAL" />
    <result column="status" property="status" jdbcType="VARCHAR" />
	<result column="material_name" property="materialName" jdbcType="VARCHAR" />
	<result column="material_code" property="materialCode" jdbcType="VARCHAR" />
	<result column="specifications" property="specifications" jdbcType="VARCHAR" />
	<result column="measuring_unit_name" property="measuringUnitName" jdbcType="VARCHAR" />
	<result column="totalNum" property="totalNum" jdbcType="INTEGER" />
    <result column="totalAmount" property="totalAmount" jdbcType="DECIMAL" />
    
  </resultMap>
   <sql id="Pagination_Sql">
		<if test="isPage == 1">
			limit
			#{pageIndex,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
		</if>
	</sql>

  <resultMap id="GetResultMap" type="com.qz.zframe.material.entity.Inventory" >
    <id column="inventory_id" property="inventoryId" jdbcType="VARCHAR" />
    <result column="material_id" property="materialId" jdbcType="VARCHAR" />
    <result column="wind_id" property="windId" jdbcType="VARCHAR" />
    <result column="stock_add_id" property="stockAddId" jdbcType="VARCHAR" />
    <result column="inventory_num" property="inventoryNum" jdbcType="INTEGER" />
    <result column="inventory_amount" property="inventoryAmount" jdbcType="DECIMAL" />
    <result column="freeze_num" property="freezeNum" jdbcType="INTEGER" />
    <result column="freeze_amount" property="freezeAmount" jdbcType="DECIMAL" />
    <result column="status" property="status" jdbcType="VARCHAR" />
    <result column="material_name" property="materialName" jdbcType="VARCHAR" />
    <result column="material_desc" property="materialDesc" jdbcType="VARCHAR" />
    <result column="material_code" property="materialCode" jdbcType="VARCHAR" />
    <result column="wind_name" property="windName" jdbcType="VARCHAR" />
    <result column="stock_add_name" property="stockAddName" jdbcType="VARCHAR" />
    <result column="specifications" property="specifications" jdbcType="VARCHAR" />
    <result column="title" property="measuringUnitName" jdbcType="VARCHAR" />
    <result column="totalNum" property="totalNum" jdbcType="INTEGER" />
    <result column="totalAmount" property="totalAmount" jdbcType="DECIMAL" />
  </resultMap>
  <select id="getInventoryList" resultMap="GetResultMap">
    select a.inventory_id as inventory_id, a.material_id as material_id, a.wind_id as wind_id, a.stock_add_id as stock_add_id,
              a.inventory_num as inventory_num, a.inventory_amount as inventory_amount, a.status as status,
              b.material_name as material_name, b.material_describe as material_desc, b.material_code as material_code,
              b.measuring_unit as measuring_unit,d.architecture_name as wind_name,e.stock_add_name as stock_add_name,
              f.measuring_unit_name
    from inventory a
    left join material b on a.material_id = b.material_id
    left join org_architecture d on (a.wind_id = d.architecture_code and d.architecture_type = '02')
    left join stock_address e on a.stock_add_id = e.stock_add_id
    left join material_unit f on b.measuring_unit = f.measuring_unit_id
    where a.status = '01'
    <if test="map.windId != null and map.windId != ''">
      and a.wind_id = #{map.windId}
    </if>
    <if test="map.stockAddId != null and map.stockAddId != ''">
      and a.stockAddId = #{map.stockAddId}
    </if>
    <if test="map.materialCode != null and map.materialCode != ''">
      and b.material_code = #{map.materialCode}
    </if>
    <if test="map.materialName != null and map.materialName != ''">
      and b.material_name like '%${map.materialName}%'
    </if>
    <if test="map.materialDesc != null and map.materialDesc != ''">
      and b.material_describe like '%${map.materialDesc}%'
    </if>
    <if test="map.stockAddName != null and map.stockAddName != ''">
      and e.stock_add_name like '%${map.stockAddName}%'
    </if>
    order by b.material_code desc
    limit ${map.start},${map.pageSize}
  </select>

  <select id="getTotal" resultType="java.lang.Integer">
    select
    count(*)
    from inventory a
    left join material b on a.material_id = b.material_id
    left join org_architecture d on (a.wind_id = d.architecture_code and d.architecture_type = '02')
    left join stock_address e on a.stock_add_id = e.stock_add_id
    left join material_unit f on b.measuring_unit = f.measuring_unit_id
    where a.status = '01'
    <if test="map.windId != null and map.windId != ''">
      and a.wind_id = #{map.windId}
    </if>
    <if test="map.stockAddId != null and map.stockAddId != ''">
      and a.stockAddId = #{map.stockAddId}
    </if>
    <if test="map.materialCode != null and map.materialCode != ''">
      and b.material_code = #{map.materialCode}
    </if>
    <if test="map.materialName != null and map.materialName != ''">
      and b.material_name like '%${map.materialName}%'
    </if>
    <if test="map.materialDesc != null and map.materialDesc != ''">
      and b.material_describe like '%${map.materialDesc}%'
    </if>
    <if test="map.stockAddName != null and map.stockAddName != ''">
      and e.stock_add_name like '%${map.stockAddName}%'
    </if>
  </select>


  
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    inventory_id, material_id, wind_id, stock_add_id, inventory_num, inventory_amount, 
    freeze_num, freeze_amount, status
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.qz.zframe.material.entity.InventoryExample" >
    select DISTINCT a.*,b.material_code,b.material_name,b.specifications,c.measuring_unit_name
    from inventory a left join material b on a.material_id = b.material_id 
    left join material_unit c on b.measuring_unit = c.measuring_unit_id
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
     <include refid="Pagination_Sql" />
  </select>
  
  
   <select id="selectAveragePriceExample" resultMap="BaseResultMap" parameterType="com.qz.zframe.material.entity.InventoryExample" >
   select sum(inventory_amount) as totalAmount,sum(inventory_num) as totalNum,sum(inventory_amount)/sum(inventory_num) as averagePrice from inventory a left join material b on a.material_id = b.material_id
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
     group by wind_id,material_id
     limit 0,1
    </if>
  </select>
 
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from inventory
    where inventory_id = #{inventoryId,jdbcType=VARCHAR}
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from inventory
    where inventory_id = #{inventoryId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.qz.zframe.material.entity.InventoryExample" >
    delete from inventory
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.qz.zframe.material.entity.Inventory" >
    insert into inventory (inventory_id, material_id, wind_id, 
      stock_add_id, inventory_num, inventory_amount, 
      freeze_num, freeze_amount, status
      )
    values (#{inventoryId,jdbcType=VARCHAR}, #{materialId,jdbcType=VARCHAR}, #{windId,jdbcType=VARCHAR}, 
      #{stockAddId,jdbcType=VARCHAR}, #{inventoryNum,jdbcType=INTEGER}, #{inventoryAmount,jdbcType=DECIMAL}, 
      #{freezeNum,jdbcType=INTEGER}, #{freezeAmount,jdbcType=DECIMAL}, #{status,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.qz.zframe.material.entity.Inventory" >
    insert into inventory
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="inventoryId != null" >
        inventory_id,
      </if>
      <if test="materialId != null" >
        material_id,
      </if>
      <if test="windId != null" >
        wind_id,
      </if>
      <if test="stockAddId != null" >
        stock_add_id,
      </if>
      <if test="inventoryNum != null" >
        inventory_num,
      </if>
      <if test="inventoryAmount != null" >
        inventory_amount,
      </if>
      <if test="freezeNum != null" >
        freeze_num,
      </if>
      <if test="freezeAmount != null" >
        freeze_amount,
      </if>
      <if test="status != null" >
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="inventoryId != null" >
        #{inventoryId,jdbcType=VARCHAR},
      </if>
      <if test="materialId != null" >
        #{materialId,jdbcType=VARCHAR},
      </if>
      <if test="windId != null" >
        #{windId,jdbcType=VARCHAR},
      </if>
      <if test="stockAddId != null" >
        #{stockAddId,jdbcType=VARCHAR},
      </if>
      <if test="inventoryNum != null" >
        #{inventoryNum,jdbcType=INTEGER},
      </if>
      <if test="inventoryAmount != null" >
        #{inventoryAmount,jdbcType=DECIMAL},
      </if>
      <if test="freezeNum != null" >
        #{freezeNum,jdbcType=INTEGER},
      </if>
      <if test="freezeAmount != null" >
        #{freezeAmount,jdbcType=DECIMAL},
      </if>
      <if test="status != null" >
        #{status,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.qz.zframe.material.entity.InventoryExample" resultType="java.lang.Integer" >
    select count(DISTINCT a.inventory_id) from inventory a  
    left join material b on a.material_id = b.material_id
     left join material_unit  c on b.measuring_unit=c.measuring_unit_id
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update inventory
    <set >
      <if test="record.inventoryId != null" >
        inventory_id = #{record.inventoryId,jdbcType=VARCHAR},
      </if>
      <if test="record.materialId != null" >
        material_id = #{record.materialId,jdbcType=VARCHAR},
      </if>
      <if test="record.windId != null" >
        wind_id = #{record.windId,jdbcType=VARCHAR},
      </if>
      <if test="record.stockAddId != null" >
        stock_add_id = #{record.stockAddId,jdbcType=VARCHAR},
      </if>
      <if test="record.inventoryNum != null" >
        inventory_num = #{record.inventoryNum,jdbcType=INTEGER},
      </if>
      <if test="record.inventoryAmount != null" >
        inventory_amount = #{record.inventoryAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.freezeNum != null" >
        freeze_num = #{record.freezeNum,jdbcType=INTEGER},
      </if>
      <if test="record.freezeAmount != null" >
        freeze_amount = #{record.freezeAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update inventory
    set inventory_id = #{record.inventoryId,jdbcType=VARCHAR},
      material_id = #{record.materialId,jdbcType=VARCHAR},
      wind_id = #{record.windId,jdbcType=VARCHAR},
      stock_add_id = #{record.stockAddId,jdbcType=VARCHAR},
      inventory_num = #{record.inventoryNum,jdbcType=INTEGER},
      inventory_amount = #{record.inventoryAmount,jdbcType=DECIMAL},
      freeze_num = #{record.freezeNum,jdbcType=INTEGER},
      freeze_amount = #{record.freezeAmount,jdbcType=DECIMAL},
      status = #{record.status,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.qz.zframe.material.entity.Inventory" >
    update inventory
    <set >
      <if test="materialId != null" >
        material_id = #{materialId,jdbcType=VARCHAR},
      </if>
      <if test="windId != null" >
        wind_id = #{windId,jdbcType=VARCHAR},
      </if>
      <if test="stockAddId != null" >
        stock_add_id = #{stockAddId,jdbcType=VARCHAR},
      </if>
      <if test="inventoryNum != null" >
        inventory_num = #{inventoryNum,jdbcType=INTEGER},
      </if>
      <if test="inventoryAmount != null" >
        inventory_amount = #{inventoryAmount,jdbcType=DECIMAL},
      </if>
      <if test="freezeNum != null" >
        freeze_num = #{freezeNum,jdbcType=INTEGER},
      </if>
      <if test="freezeAmount != null" >
        freeze_amount = #{freezeAmount,jdbcType=DECIMAL},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=VARCHAR},
      </if>
    </set>
    where inventory_id = #{inventoryId,jdbcType=VARCHAR}
  </update>
  
  <!-- 批量更新 -->
	<update id="updateBatch" parameterType="java.util.List">
		<foreach collection="list" item="item" index="index" open=""
			close="" separator=";">
			update inventory
			<set>
				inventory_num=#{item.inventoryNum,jdbcType=INTEGER},
				inventory_amount=#{item.inventoryAmount,jdbcType=DECIMAL},
				freeze_num=#{item.freezeNum,jdbcType=INTEGER},
				freeze_amount=#{item.freezeAmount,jdbcType=DECIMAL},
			</set>
			where inventory_id = #{item.inventoryId,jdbcType=VARCHAR}
		</foreach>
	</update>
  
 
  <update id="updateByPrimaryKey" parameterType="com.qz.zframe.material.entity.Inventory" >
    update inventory
    set material_id = #{materialId,jdbcType=VARCHAR},
      wind_id = #{windId,jdbcType=VARCHAR},
      stock_add_id = #{stockAddId,jdbcType=VARCHAR},
      inventory_num = #{inventoryNum,jdbcType=INTEGER},
      inventory_amount = #{inventoryAmount,jdbcType=DECIMAL},
      freeze_num = #{freezeNum,jdbcType=INTEGER},
      freeze_amount = #{freezeAmount,jdbcType=DECIMAL},
      status = #{status,jdbcType=VARCHAR}
    where inventory_id = #{inventoryId,jdbcType=VARCHAR}
  </update>
</mapper>