<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qz.zframe.tickets.mapper.TypicalOperateTicketMapper" >
  <resultMap id="BaseResultMap" type="com.qz.zframe.tickets.entity.TypicalOperateTicket" >
    <id column="typical_ticket_id" property="typicalTicketId" jdbcType="VARCHAR" />
    <result column="serial_number" property="serialNumber" jdbcType="VARCHAR" />
    <result column="typical_ticket_name" property="typicalTicketName" jdbcType="VARCHAR" />
    <result column="oper_ticket_type_id" property="operTicketTypeId" jdbcType="VARCHAR" />
    <result column="maintainer" property="maintainer" jdbcType="VARCHAR" />
    <result column="maintain_date" property="maintainDate" jdbcType="DATE" />
    <result column="status" property="status" jdbcType="VARCHAR" />
    <result column="wind_id" property="windId" jdbcType="VARCHAR" />
    <result column="work_team" property="workTeam" jdbcType="VARCHAR" />
    <result column="position_id" property="positionId" jdbcType="VARCHAR" />
    <result column="position_desc" property="positionDesc" jdbcType="VARCHAR" />
    <result column="equipment_id" property="equipmentId" jdbcType="VARCHAR" />
    <result column="equipment_desc" property="equipmentDesc" jdbcType="VARCHAR" />
    <result column="operate_content" property="operateContent" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    typical_ticket_id, serial_number, typical_ticket_name, oper_ticket_type_id, maintainer,
    maintain_date, status, wind_id, work_team, position_id, position_desc, equipment_id,
    equipment_desc, operate_content, remark
  </sql>




  <update id="batchDelete" parameterType="java.lang.String">
    update typical_operate_ticket set status = '0'
    where typical_ticket_id in
    <foreach collection="array" index="index" item="item"
             open="(" separator="," close=")">
      #{item}
    </foreach>
  </update>
  <resultMap id="GetResultMap" type="com.qz.zframe.tickets.vo.TypicalOperateTicketVo" >
    <id column="typical_ticket_id" property="typicalTicketId" jdbcType="VARCHAR" />
    <result column="serial_number" property="serialNumber" jdbcType="VARCHAR" />
    <result column="typical_ticket_name" property="typicalTicketName" jdbcType="VARCHAR" />
    <result column="oper_ticket_type_id" property="operTicketTypeId" jdbcType="VARCHAR" />
    <result column="maintainer" property="maintainer" jdbcType="VARCHAR" />
    <result column="maintain_date" property="maintainDate" jdbcType="DATE" />
    <result column="status" property="status" jdbcType="VARCHAR" />
    <result column="wind_id" property="windId" jdbcType="VARCHAR" />
    <result column="work_team" property="workTeam" jdbcType="VARCHAR" />
    <result column="position_id" property="positionId" jdbcType="VARCHAR" />
    <result column="position_desc" property="positionDesc" jdbcType="VARCHAR" />
    <result column="equipment_id" property="equipmentId" jdbcType="VARCHAR" />
    <result column="equipment_desc" property="equipmentDesc" jdbcType="VARCHAR" />
    <result column="operate_content" property="operateContent" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="wind_name" property="windName" jdbcType="VARCHAR" />
    <result column="position_name" property="positionName" jdbcType="VARCHAR" />
    <result column="equipment_name" property="equipmentName" jdbcType="VARCHAR" />
    <result column="ticket_type_name" property="ticketTypeName" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Get_Column_List" >
    a.typical_ticket_id as typical_ticket_id, a.serial_number as serial_number, a.typical_ticket_name as typical_ticket_name,
    a.oper_ticket_type_id as oper_ticket_type_id, a.maintainer as maintainer, a.maintain_date as maintain_date, a.status as status,
    a.wind_id as wind_id, a.work_team as work_team, a.position_id as position_id, a.position_desc as position_desc, a.equipment_id as equipment_id,
    a.equipment_desc as equipment_desc, a.operate_content as operate_content, a.remark as remark,
    b.architecture_name as wind_name,e.position_name as position_name,f.equipment_name as equipment_name,g.ticket_type_name as ticket_type_name
  </sql>
  <select id="getTypicalOperateTicketDetail" resultMap="GetResultMap">
    select
    <include refid="Get_Column_List" />
    from typical_operate_ticket a
    left join org_architecture b on a.wind_id = b.architecture_id and architecture_type = '02'
    left join position_encode e on a.position_id = e.position_id
    left join equipment_asset_ledger f on a.equipment_id = f.equipment_id
    left join operate_ticket_type g on a.oper_ticket_type_id = g.oper_ticket_type_id
    where a.status != '0' and a.typical_ticket_id = #{typicalTicketId}
  </select>
  <select id="getTypicalOperateTicketList" resultMap="GetResultMap">
    select
    <include refid="Get_Column_List" />
    from typical_operate_ticket a
    left join org_architecture b on a.wind_id = b.architecture_id and architecture_type = '02'
    left join position_encode e on a.position_id = e.position_id
    left join equipment_asset_ledger f on a.equipment_id = f.equipment_id
    left join operate_ticket_type g on a.oper_ticket_type_id = g.oper_ticket_type_id
    where a.status != '0'
    <if test="map.operTicketTypeId != null">
      and a.oper_ticket_type_id = #{map.operTicketTypeId}
    </if>
    <if test="map.windId != null">
      and a.wind_id = #{map.windId}
    </if>
    <if test="map.status != null">
      and a.status = #{map.status}
    </if>
    <if test="map.operateContent != null">
      and a.operate_content like '%${map.operateContent}%'
    </if>
    order by a.serial_number desc
    limit ${map.start},${map.pageSize};
  </select>
  <select id="getTotal" resultType="java.lang.Integer">
    select
    count(*)
    from typical_operate_ticket
    where status != '0'
    <if test="map.operTicketTypeId != null">
      and oper_ticket_type_id = #{map.operTicketTypeId}
    </if>
    <if test="map.windId != null">
      and wind_id = #{map.windId}
    </if>
    <if test="map.status != null">
      and status = #{map.status}
    </if>
    <if test="map.operateContent != null">
      and operate_content like '%${map.operateContent}%'
    </if>
  </select>







  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.qz.zframe.tickets.entity.TypicalOperateTicketExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from typical_operate_ticket
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from typical_operate_ticket
    where typical_ticket_id = #{typicalTicketId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from typical_operate_ticket
    where typical_ticket_id = #{typicalTicketId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.qz.zframe.tickets.entity.TypicalOperateTicketExample" >
    delete from typical_operate_ticket
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.qz.zframe.tickets.entity.TypicalOperateTicket" >
    insert into typical_operate_ticket (typical_ticket_id, serial_number, typical_ticket_name, 
      oper_ticket_type_id, maintainer, maintain_date, 
      status, wind_id, work_team, 
      position_id, position_desc, equipment_id,
      equipment_desc, operate_content, remark
      )
    values (#{typicalTicketId,jdbcType=VARCHAR}, #{serialNumber,jdbcType=VARCHAR}, #{typicalTicketName,jdbcType=VARCHAR}, 
      #{operTicketTypeId,jdbcType=VARCHAR}, #{maintainer,jdbcType=VARCHAR}, #{maintainDate,jdbcType=DATE}, 
      #{status,jdbcType=VARCHAR}, #{windId,jdbcType=VARCHAR}, #{workTeam,jdbcType=VARCHAR}, 
      #{positionId,jdbcType=VARCHAR}, #{positionDesc,jdbcType=VARCHAR}, #{equipmentId,jdbcType=VARCHAR},
      #{equipmentDesc,jdbcType=VARCHAR}, #{operateContent,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.qz.zframe.tickets.entity.TypicalOperateTicket" >
    insert into typical_operate_ticket
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="typicalTicketId != null" >
        typical_ticket_id,
      </if>
      <if test="serialNumber != null" >
        serial_number,
      </if>
      <if test="typicalTicketName != null" >
        typical_ticket_name,
      </if>
      <if test="operTicketTypeId != null" >
        oper_ticket_type_id,
      </if>
      <if test="maintainer != null" >
        maintainer,
      </if>
      <if test="maintainDate != null" >
        maintain_date,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="windId != null" >
        wind_id,
      </if>
      <if test="workTeam != null" >
        work_team,
      </if>
      <if test="positionId != null" >
        position_id,
      </if>
      <if test="positionDesc != null" >
        position_desc,
      </if>
      <if test="equipmentId != null" >
        equipment_id,
      </if>
      <if test="equipmentDesc != null" >
        equipment_desc,
      </if>
      <if test="operateContent != null" >
        operate_content,
      </if>
      <if test="remark != null" >
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="typicalTicketId != null" >
        #{typicalTicketId,jdbcType=VARCHAR},
      </if>
      <if test="serialNumber != null" >
        #{serialNumber,jdbcType=VARCHAR},
      </if>
      <if test="typicalTicketName != null" >
        #{typicalTicketName,jdbcType=VARCHAR},
      </if>
      <if test="operTicketTypeId != null" >
        #{operTicketTypeId,jdbcType=VARCHAR},
      </if>
      <if test="maintainer != null" >
        #{maintainer,jdbcType=VARCHAR},
      </if>
      <if test="maintainDate != null" >
        #{maintainDate,jdbcType=DATE},
      </if>
      <if test="status != null" >
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="windId != null" >
        #{windId,jdbcType=VARCHAR},
      </if>
      <if test="workTeam != null" >
        #{workTeam,jdbcType=VARCHAR},
      </if>
      <if test="positionId != null" >
        #{positionId,jdbcType=VARCHAR},
      </if>
      <if test="positionDesc != null" >
        #{positionDesc,jdbcType=VARCHAR},
      </if>
      <if test="equipmentId != null" >
        #{equipmentId,jdbcType=VARCHAR},
      </if>
      <if test="equipmentDesc != null" >
        #{equipmentDesc,jdbcType=VARCHAR},
      </if>
      <if test="operateContent != null" >
        #{operateContent,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.qz.zframe.tickets.entity.TypicalOperateTicketExample" resultType="java.lang.Integer" >
    select count(*) from typical_operate_ticket
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update typical_operate_ticket
    <set >
      <if test="record.typicalTicketId != null" >
        typical_ticket_id = #{record.typicalTicketId,jdbcType=VARCHAR},
      </if>
      <if test="record.serialNumber != null" >
        serial_number = #{record.serialNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.typicalTicketName != null" >
        typical_ticket_name = #{record.typicalTicketName,jdbcType=VARCHAR},
      </if>
      <if test="record.operTicketTypeId != null" >
        oper_ticket_type_id = #{record.operTicketTypeId,jdbcType=VARCHAR},
      </if>
      <if test="record.maintainer != null" >
        maintainer = #{record.maintainer,jdbcType=VARCHAR},
      </if>
      <if test="record.maintainDate != null" >
        maintain_date = #{record.maintainDate,jdbcType=DATE},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.windId != null" >
        wind_id = #{record.windId,jdbcType=VARCHAR},
      </if>
      <if test="record.workTeam != null" >
        work_team = #{record.workTeam,jdbcType=VARCHAR},
      </if>
      <if test="record.positionId != null" >
        position_id = #{record.positionId,jdbcType=VARCHAR},
      </if>
      <if test="record.positionDesc != null" >
        position_desc = #{record.positionDesc,jdbcType=VARCHAR},
      </if>
      <if test="record.equipmentId != null" >
        equipment_id = #{record.equipmentId,jdbcType=VARCHAR},
      </if>
      <if test="record.equipmentDesc != null" >
        equipment_desc = #{record.equipmentDesc,jdbcType=VARCHAR},
      </if>
      <if test="record.operateContent != null" >
        operate_content = #{record.operateContent,jdbcType=VARCHAR},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update typical_operate_ticket
    set typical_ticket_id = #{record.typicalTicketId,jdbcType=VARCHAR},
      serial_number = #{record.serialNumber,jdbcType=VARCHAR},
      typical_ticket_name = #{record.typicalTicketName,jdbcType=VARCHAR},
      oper_ticket_type_id = #{record.operTicketTypeId,jdbcType=VARCHAR},
      maintainer = #{record.maintainer,jdbcType=VARCHAR},
      maintain_date = #{record.maintainDate,jdbcType=DATE},
      status = #{record.status,jdbcType=VARCHAR},
      wind_id = #{record.windId,jdbcType=VARCHAR},
      work_team = #{record.workTeam,jdbcType=VARCHAR},
      position_id = #{record.positionId,jdbcType=VARCHAR},
      position_desc = #{record.positionDesc,jdbcType=VARCHAR},
      equipment_id = #{record.equipmentId,jdbcType=VARCHAR},
      equipment_desc = #{record.equipmentDesc,jdbcType=VARCHAR},
      operate_content = #{record.operateContent,jdbcType=VARCHAR},
      remark = #{record.remark,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.qz.zframe.tickets.entity.TypicalOperateTicket" >
    update typical_operate_ticket
    <set >
      <if test="serialNumber != null" >
        serial_number = #{serialNumber,jdbcType=VARCHAR},
      </if>
      <if test="typicalTicketName != null" >
        typical_ticket_name = #{typicalTicketName,jdbcType=VARCHAR},
      </if>
      <if test="operTicketTypeId != null" >
        oper_ticket_type_id = #{operTicketTypeId,jdbcType=VARCHAR},
      </if>
      <if test="maintainer != null" >
        maintainer = #{maintainer,jdbcType=VARCHAR},
      </if>
      <if test="maintainDate != null" >
        maintain_date = #{maintainDate,jdbcType=DATE},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="windId != null" >
        wind_id = #{windId,jdbcType=VARCHAR},
      </if>
      <if test="workTeam != null" >
        work_team = #{workTeam,jdbcType=VARCHAR},
      </if>
      <if test="positionId != null" >
        position_id = #{positionId,jdbcType=VARCHAR},
      </if>
      <if test="positionDesc != null" >
        position_desc = #{positionDesc,jdbcType=VARCHAR},
      </if>
      <if test="equipmentId != null" >
        equipment_id = #{equipmentId,jdbcType=VARCHAR},
      </if>
      <if test="equipmentDesc != null" >
        equipment_desc = #{equipmentDesc,jdbcType=VARCHAR},
      </if>
      <if test="operateContent != null" >
        operate_content = #{operateContent,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where typical_ticket_id = #{typicalTicketId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qz.zframe.tickets.entity.TypicalOperateTicket" >
    update typical_operate_ticket
    set serial_number = #{serialNumber,jdbcType=VARCHAR},
      typical_ticket_name = #{typicalTicketName,jdbcType=VARCHAR},
      oper_ticket_type_id = #{operTicketTypeId,jdbcType=VARCHAR},
      maintainer = #{maintainer,jdbcType=VARCHAR},
      maintain_date = #{maintainDate,jdbcType=DATE},
      status = #{status,jdbcType=VARCHAR},
      wind_id = #{windId,jdbcType=VARCHAR},
      work_team = #{workTeam,jdbcType=VARCHAR},
      position_id = #{positionId,jdbcType=VARCHAR},
      position_desc = #{positionDesc,jdbcType=VARCHAR},
      equipment_id = #{equipmentId,jdbcType=VARCHAR},
      equipment_desc = #{equipmentDesc,jdbcType=VARCHAR},
      operate_content = #{operateContent,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR}
    where typical_ticket_id = #{typicalTicketId,jdbcType=VARCHAR}
  </update>
</mapper>